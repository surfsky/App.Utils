<?xml version="1.0"?>
<doc>
    <assembly>
        <name>App.Web</name>
    </assembly>
    <members>
        <member name="T:App.Web.Asp">
            <summary>
            ASP.NET 网页相关辅助方法
            </summary>
            <summary>
            ASP.NET 网页相关辅助方法（数据存储）
            </summary>
            <summary>
            ASP.NET 网页相关辅助方法（IO相关）
            </summary>
        </member>
        <member name="P:App.Web.Asp.IsWeb">
            <summary>是否是网站运行环境</summary>
        </member>
        <member name="P:App.Web.Asp.IsRequestOk">
            <summary>请求是否有效（避免触发“HttpRequest在上下文中不可用”的异常）</summary>
        </member>
        <member name="P:App.Web.Asp.Host">
            <summary>主机根路径（如http://www.abc.com/）</summary>
        </member>
        <member name="P:App.Web.Asp.HostFolder">
            <summary>主机根物理路径</summary>
        </member>
        <member name="P:App.Web.Asp.ClientIP">
            <summary>获取客户端真实IP</summary>
        </member>
        <member name="M:App.Web.Asp.End">
            <summary>
            结束对客户端的输出。
            由于.NET 设计原因，Response.End()在WebForm框架下可以终止代码执行，不再处理End()之后的代码。
            在MVC框架下则只是返回响应流，不会中止代码执行。
            </summary>
        </member>
        <member name="M:App.Web.Asp.Close">
            <summary>
            强行断开与客户端的socket连接。
            只有代码发生错误（恶意的攻击），希望终止对于客户端的响应/连接时才可以使用Response.Close()
            </summary>
        </member>
        <member name="M:App.Web.Asp.RegistMobileMeta">
            <summary>在页面头部注册移动端适配的meta语句</summary>
        </member>
        <member name="M:App.Web.Asp.RegistCSS(System.String,System.Boolean)">
            <summary>在页面头部注册CSS</summary>
        </member>
        <member name="M:App.Web.Asp.RegistScript(System.String)">
            <summary>在页面头部注册脚本</summary>
        </member>
        <member name="M:App.Web.Asp.CreateFormAndPost(System.Web.UI.Page,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>创建POST表单并跳转页面</summary>
        </member>
        <member name="M:App.Web.Asp.GetServerOrNetworkImage(System.String)">
            <summary>获取服务器或网络图片</summary>
            <param name="url">可用~/，也可以用完整的http地址</param>
        </member>
        <member name="M:App.Web.Asp.IsRelative(System.String)">
            <summary>是否是相对路径（以~./等开头）</summary>
        </member>
        <member name="M:App.Web.Asp.IsSiteFile(System.String)">
            <summary>是否是本网站文件（如果以.~/开头或host相同是本站图片）</summary>
        </member>
        <member name="M:App.Web.Asp.MapPath(System.String)">
            <summary>将虚拟路径转化为物理路径。等同于Server.MapPath()</summary>
        </member>
        <member name="M:App.Web.Asp.ResolveFullUrl(System.String)">
            <summary>
            将 URL 转化为完整路径。如:
            （1）../default.aspx 转化为 http://..../application1/default.aspx
            （2）~/default.aspx 转化为 http://..../application1/default.aspx
            </summary>
        </member>
        <member name="M:App.Web.Asp.ResolveUrl(System.String)">
            <summary>
            将 URL 转化为从根目录开始的路径。如:
            （1）../default.aspx 转化为 /application1/default.aspx
            （2）~/default.aspx 转化为 /application1/default.aspx
            </summary>
        </member>
        <member name="M:App.Web.Asp.ResolveClientUrl(System.String)">
            <summary>
            将 URL 转化为相对于浏览器当前路径的相对路径。
            如浏览器当前为 /pages/test.aspx，则
            （1）/pages/default.aspx 转化为 default.aspx
            （2）~/default.aspx      转化为 ../default.aspx
            </summary>
        </member>
        <member name="M:App.Web.Asp.GetParam``1(System.String)">
            <summary>获取请求参数</summary>
        </member>
        <member name="M:App.Web.Asp.GetParam(System.String)">
            <summary>获取请求参数</summary>
        </member>
        <member name="M:App.Web.Asp.GetQuery``1(System.String)">
            <summary>获取查询字符串</summary>
        </member>
        <member name="M:App.Web.Asp.GetQueryString(System.String,System.Boolean)">
            <summary>获取查询字符串</summary>
        </member>
        <member name="M:App.Web.Asp.GetQueryInt(System.String)">
            <summary>获取查询字符串中的整型参数值</summary>
        </member>
        <member name="M:App.Web.Asp.GetQueryLong(System.String)">
            <summary>获取查询字符串中的整型参数值</summary>
        </member>
        <member name="M:App.Web.Asp.GetQueryBool(System.String)">
            <summary>获取查询字符串中的boolean参数值</summary>
        </member>
        <member name="M:App.Web.Asp.GetHandler(System.String)">
            <summary>获取 URL 对应的处理器类</summary>
            
        </member>
        <member name="M:App.Web.Asp.EnableCros">
            <summary>允许跨域（未测试）</summary>
        </member>
        <member name="M:App.Web.Asp.SetSession(System.String,System.Object,System.Nullable{System.Int32})">
            <summary>设置 Session 对象（含过期时间）</summary>
        </member>
        <member name="M:App.Web.Asp.GetSession``1(System.String)">
            <summary>获取 Session 对象</summary>
        </member>
        <member name="M:App.Web.Asp.GetSession(System.String)">
            <summary>获取 Session 对象</summary>
        </member>
        <member name="M:App.Web.Asp.HasSession(System.String)">
            <summary>是否有 Session 值</summary>
        </member>
        <member name="M:App.Web.Asp.GetSessionData(System.String,System.Func{System.Object})">
            <summary>获取Session数据（会话期有效）</summary>
        </member>
        <member name="M:App.Web.Asp.GetSessionData``1(System.String,System.Func{System.Object})">
            <summary>获取Session数据（会话期有效）</summary>
        </member>
        <member name="M:App.Web.Asp.GetContextData(System.String,System.Func{System.Object})">
            <summary>获取上下文数据（在每次请求中有效）</summary>
        </member>
        <member name="M:App.Web.Asp.GetContextData``1(System.String,System.Func{System.Object})">
            <summary>获取上下文数据（在每次请求中有效）</summary>
        </member>
        <member name="M:App.Web.Asp.ClearApplicationData(System.String)">
            <summary>清除 Application 数据</summary>
        </member>
        <member name="M:App.Web.Asp.GetApplicationData(System.String,System.Func{System.Object})">
            <summary>获取 Application 数据（网站开启一直有效）</summary>
        </member>
        <member name="M:App.Web.Asp.GetApplicationData``1(System.String,System.Func{``0})">
            <summary>获取 Application 数据（网站开启一直有效）</summary>
        </member>
        <member name="M:App.Web.Asp.GetApplicationValue``1(System.String,System.Func{``0})">
            <summary>获取 Application 数据（网站开启一直有效）</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:App.Web.Asp.SetCachePolicy(System.Web.HttpResponse,System.Int32,System.String,System.Web.HttpCacheability)" -->
        <member name="M:App.Web.Asp.GetPostText(System.Web.HttpRequest,System.Text.Encoding)">
            ------------------------------------------------------------
             服务器端处理
            ------------------------------------------------------------
             <summary>获取post上来的数据</summary>
        </member>
        <member name="M:App.Web.Asp.RebootSite">
            <summary>重启网站</summary>
        </member>
        <member name="M:App.Web.Asp.ToVirtualPath(System.String)">
            <summary>将物理路径转化为虚拟路径</summary>
        </member>
        <member name="M:App.Web.Asp.ToWebPath(System.String)">
            <summary>将 Window 路径转化为 Web 路径（替换反斜杠)</summary>
        </member>
        <member name="M:App.Web.Asp.DeleteWebFile(System.String,System.String)">
            <summary>安全删除文件（不报异常，且忽略静态资源目录文件）</summary>
        </member>
        <member name="M:App.Web.Asp.CopyWebFile(System.String,System.String)">
            <summary>拷贝网站文件。若文件名2未填写，则用guid替代。</summary>
        </member>
        <member name="M:App.Web.Asp.Write(System.String,System.Object[])">
            <summary>输出一段文本</summary>
        </member>
        <member name="M:App.Web.Asp.WriteText(System.String,System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>输出文本</summary>
        </member>
        <member name="M:App.Web.Asp.WriteHtml(System.String,System.Text.Encoding)">
            <summary>输出文本</summary>
        </member>
        <member name="M:App.Web.Asp.WriteJson(System.String,System.Text.Encoding)">
            <summary>输出Json</summary>
        </member>
        <member name="M:App.Web.Asp.WriteXml(System.String,System.Text.Encoding)">
            <summary>输出xml</summary>
        </member>
        <member name="M:App.Web.Asp.WriteAttach(System.String,System.String)">
            <summary>输出附件</summary>
        </member>
        <member name="M:App.Web.Asp.WriteFile(System.String,System.String,System.String)">
            <summary>输出文件（小于2G）</summary>
            <param name="filePath">文件物理路径</param>
            <param name="attachName">附件名。若不为空，则启动附件下载方式。</param>
            <param name="mimeType">文件Mime类型。若为空，则尝试根据文件名扩展名解析。</param>
        </member>
        <member name="M:App.Web.Asp.WriteImage(System.Drawing.Image,System.String,System.String)">
            <summary>输出图像文件</summary>
            <param name="attachName">附件名。若不为空，则启动附件下载方式。</param>
        </member>
        <member name="M:App.Web.Asp.WriteBinary(System.Byte[],System.String,System.String)">
            <summary>输出二进制文件</summary>
            <param name="mimeType">文件Mime类型。若为空，则尝试根据文件名扩展名解析。</param>
            <param name="attachName">附件名。若不为空，则启动附件下载方式。</param>
        </member>
        <member name="M:App.Web.Asp.WriteBigFile(System.String,System.String,System.String)">
            <summary>输出超大文件（未测试）</summary>
            <param name="filePath">文件物理路径</param>
            <param name="attachName">附件名。若不为空，则启动附件下载方式。</param>
            <param name="mimeType">文件Mime类型。若为空，则尝试根据文件名扩展名解析。</param>
        </member>
        <member name="M:App.Web.Asp.WriteStream(System.IO.Stream,System.String,System.String)">
            <summary>输出流（未测试）</summary>
            <param name="mimeType">文件Mime类型。若为空，则尝试根据文件名扩展名解析。</param>
            <param name="attachName">附件名。若不为空，则启动附件下载方式。</param>
        </member>
        <member name="M:App.Web.Asp.Error(System.Int32,System.String)">
            <summary>输出 HTTP 错误并截止输出</summary>
        </member>
        <member name="M:App.Web.Asp.Fail(System.String,System.Object[])">
            <summary>输出文本错误并截止输出</summary>
        </member>
        <member name="M:App.Web.Asp.WriteErrorHtml(System.Exception)">
            <summary>输出错误调试页面</summary>
        </member>
        <member name="M:App.Web.Asp.BuildRequestHtml(System.Exception)">
            <summary>获取web请求信息，并组织成html</summary>
        </member>
        <member name="M:App.Web.Asp.BuildExceptionInfo(System.Exception)">
            <summary>打印异常信息</summary>
        </member>
        <member name="M:App.Web.Asp.BuildRequestInfo(System.String)">
            <summary>打印请求基础信息</summary>
        </member>
        <member name="M:App.Web.Asp.BuildRequestParamsInfo(System.String)">
            <summary>打印请求参数</summary>
        </member>
        <member name="M:App.Web.Asp.BuildClientInfo(System.String)">
            <summary>打印客户端信息</summary>
        </member>
        <member name="M:App.Web.Asp.BuildServerInfo(System.String)">
            <summary>打印服务器端信息</summary>
        </member>
        <member name="T:App.Web.UserRolePrincipal">
            <summary>存储用户名及角色列表的 Principal</summary>
        </member>
        <member name="P:App.Web.UserRolePrincipal.Id">
            <summary>ID</summary>
        </member>
        <member name="P:App.Web.UserRolePrincipal.Roles">
            <summary>角色列表</summary>
        </member>
        <member name="M:App.Web.UserRolePrincipal.#ctor(System.Security.Principal.IIdentity,System.String,System.String[])">
            <summary>创建用户角色 Principal </summary>
        </member>
        <member name="T:App.Web.AuthHelper">
            <summary>
            表单鉴权辅助函数（将用户、角色等信息用加密字符串保存在cookie中）。
            （1）Login 创建验票，并将用户角色过期时间等信息加密保存在cookie中。
            （2）LoadPrincipal 从cookie解析验票并设置当前登录人信息。
            （3）Logout 注销
            </summary>
        </member>
        <member name="M:App.Web.AuthHelper.IsLogin">
            <summary>是否登录</summary>
        </member>
        <member name="M:App.Web.AuthHelper.GetLoginUserName">
            <summary>当前登录用户名</summary>
        </member>
        <member name="M:App.Web.AuthHelper.HasRole(System.String)">
            <summary>当前登录用户是否具有某个角色</summary>
        </member>
        <member name="M:App.Web.AuthHelper.CreatePrincipal(System.String,System.String,System.String)">
            <summary>创建主角</summary>
            <param name="userId">用户ID</param>
            <param name="userName">用户名</param>
            <param name="roleIds">角色名称列表</param>
        </member>
        <member name="M:App.Web.AuthHelper.Login(System.String,System.String,System.String[],System.DateTime,System.String)">
            <summary>登录（设置当前用户，并创建用户验票Cookie）。</summary>
            <param name="id">ID</param>
            <param name="user">用户</param>
            <param name="roles">角色名称列表</param>
            <param name="expiration">验票到期时间</param>
            <param name="domain">验票生效的域名</param>
            <returns>验票字符串</returns>
        </member>
        <member name="M:App.Web.AuthHelper.SetCurrentUser(System.String,System.String,System.String[],System.DateTime)">
            <summary>登录并设置当前用户</summary>
            <returns>验票字符串</returns>
        </member>
        <member name="M:App.Web.AuthHelper.WriteCookieTicket(System.String,System.DateTime,System.String)">
            <summary>将 Ticket 写入 Cookie</summary>
        </member>
        <member name="M:App.Web.AuthHelper.WriteHeaderTicket(System.String)">
            <summary>将 Ticket 写入 Header</summary>
        </member>
        <member name="M:App.Web.AuthHelper.LoadPrincipal">
            <summary>从 cookie 或 header 中读取验票</summary>
        </member>
        <member name="M:App.Web.AuthHelper.Logout">
            <summary>注销。销毁验票</summary>
        </member>
        <member name="M:App.Web.AuthHelper.RediretToLoginPage">
            <summary>重定向到登录页面</summary>
        </member>
        <member name="M:App.Web.AuthHelper.CreateTicket(System.String,System.String,System.String[],System.DateTime,System.String@)">
            <summary>创建验票字符串</summary>
            <param name="user">用户名</param>
            <param name="roles">角色列表</param>
            <param name="expiration">过期时间</param>
            <param name="ticketString">加密字符串</param>
        </member>
        <member name="M:App.Web.AuthHelper.ParseTicket(System.String,System.String@,System.String@,System.String[]@)">
            <summary>解析验票字符串，获取用户和角色信息</summary>
            <param name="ticketString">验票字符串</param>
            <param name="id">用户id</param>
            <param name="user">用户名</param>
            <param name="roles">角色列表</param>
            <returns>表单验证票据对象</returns>
        </member>
        <member name="T:App.Web.CookieHelper">
            <summary>
            Cookie 辅助处理方式
            </summary>
        </member>
        <member name="M:App.Web.CookieHelper.FindCookie(System.String)">
            <summary>查找Cookie值（可处理cookie名重复情况）</summary>
        </member>
        <member name="M:App.Web.CookieHelper.GetCookies">
            <summary>将 cookie 字符串解析为键值对列表（键值可重复）</summary>
        </member>
        <member name="M:App.Web.CookieHelper.GetCookie(System.String)">
            <summary>读cookie值</summary>
            <param name="name">名称</param>
            <returns>cookie值</returns>
        </member>
        <member name="M:App.Web.CookieHelper.SetCookie(System.String,System.String)">
            <summary>
            设置cookie
            </summary>
        </member>
        <member name="M:App.Web.CookieHelper.SetCookie(System.String,System.String,System.Int32)">
            <summary>
            设置cookie
            </summary>
        </member>
        <member name="T:App.Web.ExcelExporter">
            <summary>
            Excel 操作辅助类
            </summary>
        </member>
        <member name="T:App.Web.ResourceHelper">
            <summary>
            获取Web内嵌资源的辅助函数
            创建内嵌资源
            （1）将内嵌资源的编译类型改为：嵌入的资源（enbeded resource）
            （2）在Assembly.cs中注册该资源，如：
                [Assembly: WebResource("SampleProject.Sample.jpg", "image/png")]
                [Assembly: WebResource("SampleProject.SamplePicture.png", "image/png")]
                [assembly: WebResource("SampleProject.Help.htm", "text/html")]
                [assembly: WebResource("SampleProject.MyStyleSheet.css", "text/css")]
                [assembly: WebResource("SampleProject.smallFail.gif", "image/gif")]
                [assembly: WebResource("SampleProject.smallSuccess.gif", "image/gif")]
                [assembly: WebResource("SampleProject.MyScript.js", "text/javascript", PerformSubstitution = true)]
            （3）使用内嵌资源，如：
                image1.ImageUrl = GetResourceUrl("SampleProject.Sample.jpg");
                RegistCss("SampleProject.MyStyleSheet.css");
                RegistScript("SampleProject.MyScript.js");
            </summary>
        </member>
        <member name="M:App.Web.ResourceHelper.WriteResourceFile(System.Reflection.Assembly,System.String,System.String)">
            <summary>将嵌入资源输出为物理文件</summary>
            <param name="assembly">程序集</param>
            <param name="resourceName">嵌入资源的完整名称</param>
            <param name="filePath">输出的文件路径（若存在则覆盖）</param>
        </member>
        <member name="M:App.Web.ResourceHelper.GetResource(System.Reflection.Assembly,System.String,System.Boolean)">
            <summary>获取数据集中的资源流</summary>
            <param name="assembly">数据集</param>
            <param name="resourceName">资源名称</param>
            <param name="caseSensitive">是否大小写敏感</param>
            <returns></returns>
        </member>
        <member name="M:App.Web.ResourceHelper.RenderImage(System.Web.HttpResponse,System.Reflection.Assembly,System.String)">
            <summary>输出图像资源</summary>
            <param name="response"></param>
            <param name="assembly"></param>
            <param name="resourceName"></param>
            <param name="type">jpg, png, gif, etc</param>
            <param name="caseSensitive"></param>
        </member>
        <member name="M:App.Web.ResourceHelper.RenderText(System.Web.HttpResponse,System.Reflection.Assembly,System.String)">
            <summary>输出文本资源</summary>
            <param name="context"></param>
            <param name="assembly"></param>
            <param name="resourceName">资源名称。如Kingsow.Web.Handlers.WebHandlers.Help.txt</param>
            <param name="type">plain, css, html, xml, javascript</param>
        </member>
        <member name="M:App.Web.ResourceHelper.RenderBinary(System.Web.HttpResponse,System.Reflection.Assembly,System.String,System.String,System.Boolean)">
            <summary>输出二进制资源</summary>
            <param name="context"></param>
            <param name="assembly"></param>
            <param name="resourceName">资源名称。如Kingsow.Web.Handlers.WebHandlers.Help.txt</param>
            <param name="type"></param>
        </member>
        <member name="M:App.Web.ResourceHelper.GetResourceUrl(System.String)">
            <summary>获取资源url</summary>
            <param name="resourceName"></param>
            <returns>
            类似：WebResource.axd?a=pWebCtrl&amp;r=WebCtrl.cutecat.jpg&amp;t=632390947985312500
            a  - assembly
            r  - resourceName
            t  - assembly's timeStamp
            </returns>
        </member>
        <member name="M:App.Web.ResourceHelper.RegistCss(System.String)">
            <summary>将资源注册为css</summary>
            <param name="resourceName"></param>
        </member>
        <member name="M:App.Web.ResourceHelper.RegistScript(System.String)">
            <summary>将资源注册为script</summary>
            <param name="resourceName"></param>
        </member>
        <member name="T:App.Web.ScriptHelper">
            <summary>
            Javascript 相关的辅助类
            </summary>
        </member>
        <member name="M:App.Web.ScriptHelper.Alert(System.String,System.String)">
            <summary>
            弹出信息并返回到指定页
            </summary>
            <param name="msg">弹出的消息</param>
            <param name="url">指定转向的页面</param>
        </member>
        <member name="M:App.Web.ScriptHelper.KeepClientActive">
            <summary>
            为了防止常时间不刷新页面造成会话超时
            每隔一分钟向本页发送一个XmlHttp无刷新请求以维持会话不被超时
            这个方法也在Page.OnInit方法里调用
            </summary>
        </member>
        <member name="T:App.Web.VisitCounter">
            <summary>
            访问计数器
            </summary>
        </member>
        <member name="T:App.Web.VisitCounter.Visit">
            <summary>访问记录</summary>
        </member>
        <member name="M:App.Web.VisitCounter.IsHeavy(System.String,System.String,System.Int32,System.Int32)">
            <summary>访问是否过于密集</summary>
            <param name="seconds">检测周期（秒）</param>
            <param name="max">最大值</param>
            <example>
            protected void Application_BeginRequest(object sender, EventArgs e)
            {
                var ip = ....;
                var url = ...;
                if (VisitCounter.IsOverFreqency(ip, url, 10, 100))
                {
                    HttpContext.Current.Request.Abort();
                }
            }
            </example>
        </member>
    </members>
</doc>
